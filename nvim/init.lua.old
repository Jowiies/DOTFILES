-- Ensure Packer (plugin manager) is installed
local ensure_packer = function()
  local fn = vim.fn
  local install_path = fn.stdpath('data')..'/site/pack/packer/start/packer.nvim'
  if fn.empty(fn.glob(install_path)) > 0 then
    fn.system({'git', 'clone', '--depth', '1', 'https://github.com/wbthomason/packer.nvim', install_path})
    vim.cmd [[packadd packer.nvim]]
    return true
  end
  return false
end
local packer_bootstrap = ensure_packer()

-- Configure plugins
require('packer').startup(function(use)
  -- Package manager
  use 'wbthomason/packer.nvim'
  use 'EdenEast/nightfox.nvim'

  -- File tree explorer
  use {
    'nvim-tree/nvim-tree.lua',
    requires = 'nvim-tree/nvim-web-devicons',  -- Optional icons
    config = function()
      require("nvim-tree").setup()
    end
  }

   use {
    'nvim-treesitter/nvim-treesitter',
    config = function()
      require('nvim-treesitter.configs').setup {
        highlight = { enable = true },
      }
    end
  }

  -- LSP and Autocompletion
  use 'neovim/nvim-lspconfig'          -- LSP client
  use 'hrsh7th/nvim-cmp'               -- Completion engine
  use 'hrsh7th/cmp-nvim-lsp'           -- LSP completion source
  use 'hrsh7th/cmp-buffer'             -- Buffer words completion
  use 'hrsh7th/cmp-path'               -- Filesystem path completion

  -- Automatically set up after cloning Packer
  if packer_bootstrap then
    require('packer').sync()
  end
end)

-- Disable default file explorer (netrw)
vim.g.loaded_netrw = 1
vim.g.loaded_netrwPlugin = 1

-- colorscheme
vim.o.termguicolors = true
vim.g.transparent_enabled = true
vim.cmd[[colorscheme nightfox]]

--highlighting
require('nvim-treesitter.configs').setup({
  highlight = { enable = true },
})

-- Keybindings
vim.keymap.set('n', '<C-n>', ':NvimTreeToggle<CR>', { silent = true })  -- Toggle file tree

-- LSP Setup (clangd for C++)
local lspconfig = require('lspconfig')
lspconfig.clangd.setup({})

-- Autocompletion (nvim-cmp)
local cmp = require('cmp')
cmp.setup({
  sources = {
    { name = 'nvim_lsp' },  -- LSP-based completion
    { name = 'buffer' },    -- Current buffer words
    { name = 'path' },      -- Filesystem paths
  },
  mapping = {
    ['<CR>'] = cmp.mapping.confirm({ select = true }),
    ['<Tab>'] = cmp.mapping.select_next_item(),
    ['<S-Tab>'] = cmp.mapping.select_prev_item(),
  }
})

-- LSP Keybindings
vim.keymap.set('n', 'gD', vim.lsp.buf.declaration, {})
vim.keymap.set('n', 'gd', vim.lsp.buf.definition, {})
vim.keymap.set('n', 'K', vim.lsp.buf.hover, {})
vim.keymap.set('n', 'gi', vim.lsp.buf.implementation, {})
vim.keymap.set('n', '<space>rn', vim.lsp.buf.rename, {})
vim.keymap.set('n', '<space>f', function()
    vim.lsp.buf.format { async = true }
end, opts)


-- Enable line numbers and syntax highlighting
vim.opt.number = true
vim.opt.relativenumber = true
vim.opt.syntax = 'on'
vim.opt.tabstop = 4
vim.opt.shiftwidth = 4
vim.opt.expandtab = true
